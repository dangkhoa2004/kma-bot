require("dotenv").config();

const { Client, GatewayIntentBits, Events, Collection } = require("discord.js");
const fs = require("fs");
const path = require("path");
const { askGemini } = require("./utils/gemini");

const discordToken = process.env.DISCORD_TOKEN;
const geminiApiKey = process.env.GEMINI_API_KEY;
const qnaChannelId = process.env.QNA_CHANNEL_ID;
const calenChannelId = process.env.CALEN_CHANNEL_ID;

// --- BEGIN: Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ---
if (!discordToken) {
  console.error("L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t.");
  process.exit(1);
}
if (!geminiApiKey) {
  console.warn(
    "C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. Ch·ª©c nƒÉng AI QnA s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
  );
}
if (!qnaChannelId) {
  console.warn(
    "C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng QNA_CHANNEL_ID ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. Ch·ª©c nƒÉng AI QnA s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
  );
}
if (!calenChannelId) {
  console.warn(
    "C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng CALEN_CHANNEL_ID ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. Ch·ª©c nƒÉng Calendar s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
  );
}
// --- END: Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ---

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

client.commands = new Collection();
const commandsPath = path.join(__dirname, "commands");

// --- Logic t·∫£i l·ªánh message ('!') ---
// Gi·ªØ l·∫°i n·∫øu b·∫°n v·∫´n c√≥ c√°c l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng '!' kh√°c
if (fs.existsSync(commandsPath)) {
  const commandFiles = fs
    .readdirSync(commandsPath)
    .filter((file) => file.endsWith(".js"));

  for (const file of commandFiles) {
    // B·ªè qua file q.js n·∫øu ch∆∞a x√≥a
    if (file === "q.js") continue;

    const filePath = path.join(commandsPath, file);
    try {
      const command = require(filePath);
      // Ch·ªâ t·∫£i c√°c l·ªánh message c≈© (c√≥ name v√† execute)
      if (
        command &&
        typeof command.name === "string" &&
        typeof command.execute === "function"
      ) {
        client.commands.set(command.name, command);
        console.log(`‚úÖ ƒê√£ t·∫£i l·ªánh message: !${command.name}`);
      }
      // B·ªè qua c√°c file kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c l√† slash command c≈©
      // else {
      //   console.warn(`‚ö†Ô∏è File l·ªánh ${file} kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng l·ªánh message h·ª£p l·ªá.`);
      // }
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i l·ªánh ${file}:`, error);
    }
  }
} else {
  console.warn("‚ö†Ô∏è Th∆∞ m·ª•c 'commands' kh√¥ng t·ªìn t·∫°i. B·ªè qua vi·ªác t·∫£i l·ªánh.");
}
// --- K·∫øt th√∫c t·∫£i l·ªánh message ---

// --- B·ªè logic ƒëƒÉng k√Ω Slash Command ---
// const rest = new REST...
// (async () => { ... })();

client.once(Events.ClientReady, (c) => {
  console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n ${c.user.tag}`);
});

// --- B·ªè tr√¨nh x·ª≠ l√Ω InteractionCreate ---
// client.on(Events.InteractionCreate, async interaction => { ... });

// --- X·ª≠ l√Ω tin nh·∫Øn ---
client.on(Events.MessageCreate, async (message) => {
  // B·ªè qua tin nh·∫Øn t·ª´ bot ho·∫∑c ngo√†i server (DM)
  if (message.author.bot || !message.guild) return;

  // --- X·ª≠ l√Ω l·ªánh message ('!') ---
  // Gi·ªØ l·∫°i n·∫øu b·∫°n c√≥ c√°c l·ªánh '!' kh√°c c·∫ßn ho·∫°t ƒë·ªông
  if (message.content.startsWith("!")) {
    const args = message.content.slice(1).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();
    const command = client.commands.get(commandName);

    if (command) {
      console.log(
        `[CMD] Th·ª±c thi l·ªánh !${commandName} b·ªüi ${message.author.tag}`
      );
      try {
        // ‚ö° B·ªî SUNG KI·ªÇM TRA CHANNEL ·ªû ƒê√ÇY:
        const {
          checkAskCommandChannel,
          checkCalendarCommandChannel,
        } = require("./utils/channelRestrictions");

        // N·∫øu l·ªánh l√† !q th√¨ ki·ªÉm tra channel QnA
        if (await checkAskCommandChannel(message, commandName, qnaChannelId))
          return;

        // N·∫øu l·ªánh l√† !lich th√¨ ki·ªÉm tra channel Calendar
        if (
          await checkCalendarCommandChannel(
            message,
            commandName,
            calenChannelId
          )
        )
          return;

        // N·∫øu kh√¥ng b·ªã ch·∫∑n, th·ª±c thi l·ªánh
        await command.execute(message, args, client);
      } catch (error) {
        console.error(`L·ªói th·ª±c thi l·ªánh !${commandName}:`, error);
        try {
          await message.reply("‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh n√†y.");
        } catch (replyError) {
          console.error("L·ªói khi g·ª≠i th√¥ng b√°o l·ªói th·ª±c thi l·ªánh:", replyError);
        }
      }
      return;
    }
  }

  // --- X·ª≠ l√Ω AI QnA trong k√™nh ch·ªâ ƒë·ªãnh ---
  // Ch·ªâ ch·∫°y n·∫øu: c√≥ ID k√™nh, c√≥ API key, v√† tin nh·∫Øn n·∫±m ƒê√öNG k√™nh ƒë√≥
  if (
    qnaChannelId &&
    geminiApiKey &&
    message.channel.id === qnaChannelId
    // Kh√¥ng c·∫ßn check !message.content.startsWith('/') n·ªØa v√¨ kh√¥ng c√≤n Interaction handler
  ) {
    console.log(
      `[QnA Channel] Tin nh·∫Øn t·ª´ ${message.author.tag} trong k√™nh QnA (${qnaChannelId}): "${message.content}"`
    );
    message.channel.sendTyping();
    try {
      const aiReply = await askGemini(message.content, geminiApiKey);
      if (aiReply) {
        // Chia nh·ªè n·∫øu c·∫ßn
        if (aiReply.length > 2000) {
          const chunks = aiReply.match(/[\s\S]{1,2000}/g) || [];
          for (const chunk of chunks) {
            // Tr·∫£ l·ªùi tin nh·∫Øn g·ªëc cho ph·∫ßn ƒë·∫ßu, c√°c ph·∫ßn sau g·ª≠i th∆∞·ªùng
            if (chunks.indexOf(chunk) === 0) {
              await message.reply(chunk).catch(console.error);
            } else {
              await message.channel.send(chunk).catch(console.error);
            }
          }
        } else {
          await message.reply(aiReply).catch(console.error);
        }
      } else {
        console.warn("[QnA Channel] Gemini kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.");
        // await message.reply("üòï AI kh√¥ng c√≥ ph·∫£n h·ªìi cho vi·ªác n√†y.").catch(console.error);
      }
    } catch (error) {
      console.error("[QnA Channel] L·ªói Gemini:", error);
      try {
        await message
          .reply("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ AI.")
          .catch(console.error);
      } catch (replyError) {
        console.error(
          "[QnA Channel] L·ªói khi g·ª≠i th√¥ng b√°o l·ªói Gemini:",
          replyError
        );
      }
    }
  }
  // N·∫øu tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh '!' v√† kh√¥ng ·ªü trong k√™nh QnA, bot s·∫Ω b·ªè qua.
});

client.on(Events.Error, console.error);
client.on(Events.Warn, console.warn);

client.login(discordToken);
