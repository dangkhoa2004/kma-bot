// events/interactionCreate.js
const { Events } = require("discord.js");
const { logInfo, logError } = require("../utils/logger");
const { updateGitHubReposLogic } = require("../features/github/repoUpdater");
const { updateRecentCommits } = require("../features/github/commitUpdater");

const REPO_REFRESH_BUTTON_ID =
  process.env.REPO_REFRESH_BUTTON_ID || "refresh-github-repos";
const COMMIT_REFRESH_BUTTON_ID =
  process.env.COMMIT_REFRESH_BUTTON_ID || "refresh-github-commits";
const githubRepoChannelId = process.env.GITHUB_CHANNEL_ID;
const githubCommitsChannelId = process.env.COMMITS_CHANNEL_ID;

module.exports = {
  name: Events.InteractionCreate,
  async execute(interaction, client) {
    if (!interaction.isButton()) return;

    if (
      interaction.customId === REPO_REFRESH_BUTTON_ID &&
      interaction.channelId === githubRepoChannelId
    ) {
      logInfo(
        `[T∆Ø∆†NG T√ÅC] N√∫t l√†m m·ªõi REPO ƒë∆∞·ª£c nh·∫•n b·ªüi ${interaction.user.tag}`
      );
      try {
        await interaction.reply({
          content: "üîÑ ƒêang l√†m m·ªõi danh s√°ch repositories...",
          ephemeral: true,
        });
        await updateGitHubReposLogic(client, interaction.channel);
        logInfo(`[T∆Ø∆†NG T√ÅC] Ho√†n t·∫•t l√†m m·ªõi REPO qua n√∫t.`);
        await interaction
          .editReply({ content: "‚úÖ Danh s√°ch repositories ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!" })
          .catch(() => {});
      } catch (error) {
        logError(`[T∆Ø∆†NG T√ÅC] L·ªói n√∫t l√†m m·ªõi REPO:`, error);
        try {
          await interaction
            .editReply({ content: `‚ùå L·ªói l√†m m·ªõi Repo: ${error.message}` })
            .catch(() => {});
        } catch (e) {
          console.error("Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi l·ªói t∆∞∆°ng t√°c Repo");
        }
      }
      return;
    }

    if (
      interaction.customId === COMMIT_REFRESH_BUTTON_ID &&
      interaction.channelId === githubCommitsChannelId
    ) {
      logInfo(
        `[T∆Ø∆†NG T√ÅC] N√∫t l√†m m·ªõi COMMIT ƒë∆∞·ª£c nh·∫•n b·ªüi ${interaction.user.tag}`
      );
      try {
        await interaction.reply({
          content: "üîÑ ƒêang l√†m m·ªõi danh s√°ch commits...",
          ephemeral: true,
        });
        await updateRecentCommits(client, interaction.channel);
        logInfo(`[T∆Ø∆†NG T√ÅC] Ho√†n t·∫•t l√†m m·ªõi COMMIT qua n√∫t.`);
        await interaction
          .editReply({ content: "‚úÖ Danh s√°ch commits ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!" })
          .catch(() => {});
      } catch (error) {
        logError(`[T∆Ø∆†NG T√ÅC] L·ªói n√∫t l√†m m·ªõi COMMIT:`, error);
        try {
          await interaction
            .editReply({ content: `‚ùå L·ªói l√†m m·ªõi Commit: ${error.message}` })
            .catch(() => {});
        } catch (e) {
          console.error("Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi l·ªói t∆∞∆°ng t√°c Commit");
        }
      }
      return;
    }
  },
};
